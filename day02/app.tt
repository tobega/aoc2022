templates indexof&{values:}
  def code: $;
  $values -> \[i](when <=$code> do $i!\) -> $(first)!
end indexof

composer parseStrategy
  {elf: <'.'> -> indexof&{values: 0:['A','B','C']}, (<WS>) you: <'.'> -> indexof&{values: 0:['X','Y','Z']}}
end parseStrategy

def strategy: [$IN::lines -> parseStrategy];

def shape: 0:[1,2,3];
def score: 0:[3,6,0];

templates round
  def diff: ($.you::raw - $.elf::raw) mod 3;
  $score($diff) + $shape($.you::raw) !
end round

source solutionPart1
  $strategy ... -> round -> ..=Sum&{of: :()} !
end solutionPart1

def resultCode: youÂ´0:[2, 0, 1];
templates forceResult
  {elf: $.elf, you: ($resultCode($.you) + $.elf::raw) mod 3}!
end forceResult

source solutionPart2
  $strategy ... -> forceResult -> round -> ..=Sum&{of: :()} !
end solutionPart2

'$:'part' -> SYS::property;' -> \(
  when <='part1'|=''> do $solutionPart1 !
  when <='part2'> do $solutionPart2 !
  otherwise 'Unknown part $;' !
\) -> '$;
' -> !OUT::write
