def alphabet: prioÂ´1:['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'...];
templates toPrio
  def item: $::raw;
  $alphabet -> \[i](when <=$item> do $i!\) -> $(first)!
end toPrio

composer parseRucksackEntry
  {<compartments>}
  rule compartments: <'\w+'> -> [$...] -> \((left:$(1..last~/2))! (right:$(last~/2~..last)) !\)
end parseRucksackEntry

def input: 0:[$IN::lines -> parseRucksackEntry] -> \[i]({$..., group: $i ~/ 3}!\);

source solutionPart1
  $input... -> ({|$.left... -> {item:$}|} join {|$.right... -> {item:$}|})...
  -> $.item -> toPrio -> $::raw -> ..=Sum&{of: :()} !
end solutionPart1

source solutionPart2
  def table: {|$input -> \[i]({elf: $i, group:$.group, by $.left... -> (item:$)} !
    {elf: $i, group:$.group, by $.right... -> (item:$)}!\)... |};
  ($table divide&{over:$table({group:,item:})} $table({group:,elf:}))...
  -> $.item -> toPrio -> $::raw -> ..=Sum&{of: :()} !
end solutionPart2

'$:'part' -> SYS::property;' -> \(
  when <='part1'|=''> do $solutionPart1 !
  when <='part2'> do $solutionPart2 !
  otherwise 'Unknown part $;' !
\) -> '$;
' -> !OUT::write
