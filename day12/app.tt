def heights: ['abcdefghijklmnopqrstuvwxyz'... -> height´$];
def from: ['aabcdefghijklmnopqrstuvwxyz'... -> height´$];
templates lower
  def to: $;
  $heights -> \[i](<=$to> $from($i)!\)... !
end lower

composer parseMapLine
  1"x":[<height´'.'>+]
end parseMapLine

def input: 1"y":[$IN::lines -> parseMapLine];
def goal: $input -> \[y;x](when <=height´'E'> do {x: $x, y: $y}!\)... ...;

source search&{map:}
  data map <[<[<height|"steps">* VOID]>* VOID]> local
  @: {map: $map, result: 0"steps"};
  @.map($goal.y;$goal.x):0"steps";
  [{$goal..., to: height´'z'}] -> #
  $@.result!
  when <?($@.result <1"steps"..>)> do !VOID
  when <[]> do
    [$... -> #] -> #
  when <´{}´ {steps: VOID}> do
    def steps: $@.map($.y;$.x) + 1"steps";
    {y: $.y - 1"y", x: $.x, from: $.to -> lower, steps: $steps} -> #
    {y: $.y + 1"y", x: $.x, from: $.to -> lower, steps: $steps} -> #
    {y: $.y, x: $.x - 1"x", from: $.to -> lower, steps: $steps} -> #
    {y: $.y, x: $.x + 1"x", from: $.to -> lower, steps: $steps} -> #
  when <{y: <$@.map::first..$@.map::last>,
    x: <$@.map(first)::first..$@.map(first)::last>}
    ?($ <{from: <´´ ..height´'a'>}>)
    ?($@.map($.y;$.x) <´´ =height´'S'>)> do @.result: $.steps;
  when <{y: <$@.map::first..$@.map::last>,
      x: <$@.map(first)::first..$@.map(first)::last>}
      ?($ <{from: <´´ ..$@.map($.y;$.x)>}>)> do
    {to: $@.map($.y;$.x), x: $.x, y: $.y} !
    @.map($.y;$.x):$.steps;
end search

source solutionPart1
  $search&{map: $input}!
end solutionPart1

source solutionPart2
  $search&{map: $input -> \[i;j](when <=height´'a'> do height´'S' ! otherwise $!\)}!
end solutionPart2

'$:'part' -> SYS::property;' -> \(
  when <='part1'|=''> do $solutionPart1 !
  when <='part2'> do $solutionPart2 !
  otherwise 'Unknown part $;' !
\) -> '$;
' -> !OUT::write
